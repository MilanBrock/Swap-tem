{
	"info": {
		"_postman_id": "43b71314-64e8-4f6b-af5d-afd4320d3293",
		"name": "Swap-tem Inventory management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24581680"
	},
	"item": [
		{
			"name": "Item Controller",
			"item": [
				{
					"name": "Post Item [Valid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Succesfull item POST (201) test\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"ElGato\",\r\n    \"description\":\"Fiercest of them all.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Item [Invalid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input (406) to item POST test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"ItemWithATitleThatExceedsTheNameLengthLimit\",\r\n    \"description\":\"Item description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item {1} [Valid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET request for Item1\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.name).to.eql(\"Penguino\");\r",
									"  pm.expect(responseJson.description).to.eql(\"Lives in the cold.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/items/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item {-1} [Invalid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Non existent item (406) on item GET test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/items/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item [Valid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Succesfull item update (202) to item PUT test\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":1,\r\n    \"name\":\"Item1NEW\",\r\n    \"description\":\"ItemDesc1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item [Invalid (Name)]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input (406) to item PUT test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":1,\r\n    \"name\":\"Item1NEWNameIsNotValidBecauseItExceedsTheNameLengthLimit\",\r\n    \"description\":\"ItemDesc1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item [Invalid (Id)]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input (406) to item PUT test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":-1,\r\n    \"name\":\"ItemNewName\",\r\n    \"description\":\"ItemDesc1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item {1} [Valid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Succesfull item deletion (202) to item DELETE test\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/items/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item {-1} [Invalid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Non existent item (406) on item GET test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/items/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Controller",
			"item": [
				{
					"name": "Register user [Valid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Succesfull user POST (201) test\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"NewUsername\",\r\n    \"password\":\"NewUserPassword\",\r\n    \"currency\":250\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User [Invalid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input (406) to user POST test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"NewUsernameThatExceedsTheTwentyFiveCharacterLimit\",\r\n    \"password\":\"NewUserPassword\",\r\n    \"currency\":250\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User {1} [Valid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET request for userid 1\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.username).to.eql(\"MilanBrock\");\r",
									"  pm.expect(responseJson.password).to.eql(\"Secret\");\r",
									"  pm.expect(responseJson.currency).to.eql(650);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User {-1} [Invalid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Non existent user (406) on user GET test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User [Valid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Succesfull user update (202) to user PUT test\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":1,\r\n    \"username\":\"MilanBrockNew\",\r\n    \"password\":\"NewSecret\",\r\n    \"currency\":999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User [Invalid (Username)]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid username input (406) to user PUT test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":1,\r\n    \"username\":\"MilanBrockNewButTheNameExceedsTheTwentyFiveCharacterLimit\",\r\n    \"password\":\"NewSecret\",\r\n    \"currency\":999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User [Invalid (Id)]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid id input (406) to user PUT test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":-1,\r\n    \"username\":\"MilanBrockNew\",\r\n    \"password\":\"NewSecret\",\r\n    \"currency\":999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User {-1} [Invalid]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Non existent user (406) on user GET test\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}